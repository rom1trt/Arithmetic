        OCaml version 4.07.0

# let sign x =
  if x >= 0 then
    1
  else
    -1;;
        val sign : int -> int = <fun>
# let quot a b = let q = a/b and r=a mod b
               in if b=0 then
                   invalid_arg("b must be different of 0")
                 else
                   if r<0 then
                     q-1
                   else
                     q;;
              val quot : int -> int -> int = <fun>
# let modulo a b =
  let r = a mod b in
  if r<0 then
    r+b
  else
    r;;
          val modulo : int -> int -> int = <fun>
# modulo (-5) 3;; modulo (-5) 3;;
- : int = 1
# let div a b = quotient(modulo (a,b));;
Characters 14-22:
  let div a b = quotient(modulo (a,b));;
                ^^^^^^^^
Error: Unbound value quotient
# let div a b = quot(modulo (a,b));;
Characters 26-31:
  let div a b = quot(modulo (a,b));;
                            ^^^^^
Error: This expression has type 'a * 'b
       but an expression was expected of type int
# let div a b = (quot a b,modulo a b);;
val div : int -> int -> int * int = <fun>
# let modulo a b =
  let r = a mod b in
  if r<0 then
    r+b
  else
    r;;
          val modulo : int -> int -> int = <fun>
# div 5 2;;
- : int * int = (2, 1)
# div (-57) 5;;
- : int * int = (-12, 3)
# 